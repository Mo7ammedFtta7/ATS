@model SmartHup.Models.ServiceProvider
@{Dictionary<Tuple<string, string>, bool> menu = ViewBag.menu;
    if (menu == null)
    { menu = new Dictionary<Tuple<string, string>, bool>(); }
}

@{
    ViewBag.title = "Create";
}

<h2>Add Service Provider - Service Provider Management</h2>
@using (Html.BeginForm(new { @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()

<div class="box-body">

    <hr />

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.serviceProviderId, htmlAttributes: new { @class = " " })
        <div class=" ">
            @Html.EditorFor(model => model.serviceProviderId, new { htmlAttributes = new { @class = "form-control", @Required = "" } })
            @Html.ValidationMessageFor(model => model.serviceProviderId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.serviceProviderName, htmlAttributes: new { @class = " " })
        <div class=" ">
            @Html.EditorFor(model => model.serviceProviderName, new { htmlAttributes = new { @class = "form-control", @Required = "" } })
            @Html.ValidationMessageFor(model => model.serviceProviderName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.serviceProviderEName, htmlAttributes: new { @class = " " })
        <div class=" ">
            @Html.EditorFor(model => model.serviceProviderEName, new { htmlAttributes = new { @class = "form-control", @Required = "" } })
            @Html.ValidationMessageFor(model => model.serviceProviderEName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.serviceProviderLabel, htmlAttributes: new { @class = " " })
        <div class=" ">
            @Html.EditorFor(model => model.serviceProviderLabel, new { htmlAttributes = new { @class = "form-control", @Required = "" } })
            @Html.ValidationMessageFor(model => model.serviceProviderLabel, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.serviceProviderELabel, htmlAttributes: new { @class = " " })
        <div class=" ">
            @Html.EditorFor(model => model.serviceProviderELabel, new { htmlAttributes = new { @class = "form-control", @Required = "" } })
            @Html.ValidationMessageFor(model => model.serviceProviderELabel, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.serviceProviderStatus, htmlAttributes: new { @class = " " })
        <div class=" ">
            @Html.DropDownListFor(model => model.serviceProviderStatus, ViewBag.Status as SelectList, null, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.serviceProviderStatus, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.serviceProviderTypeId, htmlAttributes: new { @class = " " })
        <div class=" ">
            @Html.DropDownList("serviceProviderTypeId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.serviceProviderTypeId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="box-footer">
            @if (menu.ContainsKey(Tuple.Create("ServiceProvider", "Create")))
            {
                <input type="submit" value="Create" class="btn btn-primary" />
            }

            <a href="@Url.Action("Index")" class="btn btn-default">Back to List</a>
        </div>
    </div>

</div>


}



