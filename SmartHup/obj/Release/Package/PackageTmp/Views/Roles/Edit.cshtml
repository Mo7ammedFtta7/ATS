@model SmartHup.Models.Role

@{
    ViewBag.Title = "Edit";
    Dictionary<Tuple<string, string>, bool> menu = ViewBag.menu;
    if (menu == null) { menu = new Dictionary<Tuple<string, string>, bool>(); }
}

<h2>Edit Role - Role Management</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.systemId )
        @Html.HiddenFor(model => model.createdBy)
        @Html.HiddenFor(model => model.creationDate)
        @Html.HiddenFor(model => model.modifiedBy)
        @Html.HiddenFor(model => model.modificationDate)
        @Html.HiddenFor(model => model.deletedBy)
        @Html.HiddenFor(model => model.deletedBy)
        @Html.HiddenFor(model => model.version, new { htmlAttributes = new { @class = "form-control" } })
                @Html.HiddenFor(model => model.createdBy, new { htmlAttributes = new { @class = "form-control" } })
                @Html.HiddenFor(model => model.modifiedBy, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.modifiedBy, "", new { @class = "text-danger" })

                @Html.HiddenFor(model => model.creationDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.creationDate, "", new { @class = "text-danger" })

                @Html.HiddenFor(model => model.modificationDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.modificationDate, "", new { @class = "text-danger" })
 

                @Html.HiddenFor(model => model.version, new { htmlAttributes = new { @class = "form-control" } })

        <div class="form-group">
            <label1 class="control-label col-md-2">
                Service Provider Type
            </label1>
            <div class="col-md-10" >
                @Html.DropDownList("serviceProviderTypeId", null, htmlAttributes: new { @class = "form-control select2" })
                @Html.ValidationMessageFor(model => model.serviceProviderTypeId, "", new { @class = "text-danger" })
            </div>
        </div>


      <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group hide">
            @Html.LabelFor(model => model.status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("status", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
                @if (menu.ContainsKey(Tuple.Create("Roles", "Index")))
                {
                    <a href="@Url.Action("Index")" class="btn btn-default">Back to List</a>
                }
            </div>
        </div>
  </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
