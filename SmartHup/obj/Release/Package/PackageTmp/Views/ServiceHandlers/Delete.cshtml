@model SmartHup.Models.ServiceHandler
@{Dictionary<Tuple<string, string>, bool> menu = ViewBag.menu;
    if (menu == null)
    {menu=new Dictionary<Tuple<string, string>, bool>(); }
 }
<h4>Delete ServiceHandler - ServiceHandler Managment</h4>
<h3>Are you sure you want to delete this?</h3>
<div>
    
    <hr />
     <table class="table table-striped" border="0">
        <tr>
            <td>
            @Html.DisplayNameFor(model => model.creationDate)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.creationDate)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.modificationDate)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.modificationDate)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.createdBy)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.createdBy)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.modifiedBy)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.modifiedBy)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.version)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.version)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.serviceHanlerId)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.serviceHanlerId)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.serviceHanlerName)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.serviceHanlerName)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.serviceHanlerStatus)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.serviceHanlerStatus)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.serviceHostUri)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.serviceHostUri)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.serviceHostIntegrationType)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.serviceHostIntegrationType)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.serviceHostCharSet)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.serviceHostCharSet)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.isSslExist)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.isSslExist)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.serviceHostPublicKey)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.serviceHostPublicKey)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.serviceHostEncryptionMethod)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.serviceHostEncryptionMethod)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.serviceHostAcceptEncoding)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.serviceHostAcceptEncoding)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.serviceHostContentType)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.serviceHostContentType)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.deletedDate)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.deletedDate)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.deletedBy)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.deletedBy)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.entityStatus_systemId)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.entityStatus_systemId)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.EntityStatus.EntityStatusName)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.EntityStatus.EntityStatusName)
           </td>
        </tr>

        <tr>
            <td>
            @Html.DisplayNameFor(model => model.Service.serviceId)
            </td>
			
            <td>
            @Html.DisplayFor(model => model.Service.serviceId)
           </td>
        </tr>

    </table>

    @using (Html.BeginForm()) {
        @Html.AntiForgeryToken()

        <div class="form-actions no-color">
		@if( menu.ContainsKey(Tuple.Create("ServiceHandler","Delete")) ) {
            <input type="submit" value="Delete" class="btn btn-danger" /> 
			}
            @Html.ActionLink("Back to List", "Index",null, new {@class= "btn btn-primary" })
        </div>
    }
</div>
